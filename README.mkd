This repository servers as a log of my endeavour to learn to use and understand
the [Coq](https://coq.inria.fr/) proof assistant. It may contain proofs, attempts
at proofs, links to related resources (blogs, articles, books), notes on type theory,
logic, formal verification, theorem proving, automated reasoning, and much more.

![](http://i.creativecommons.org/p/zero/1.0/80x15.png)

## Useful resources

-   [Official Coq documentation](https://coq.inria.fr/documentation)
    -   The official documentation is OK, quite comprehensive. The description of
        tactics is very good, there are few undocuments points.
    -   [Reference Manual](https://coq.inria.fr/distrib/current/files/Reference-Manual.pdf) [PDF]
    -   [Tutorial](https://coq.inria.fr/distrib/current/files/Tutorial.pdf) [PDF]
        -   A simple and straightforward introduction to basics of proofs using Coq
-   The [coq-club](https://sympa.inria.fr/sympa/arc/coq-club) mailing list
-   [_Software Foundations_](http://www.cis.upenn.edu/~bcpierce/sf/current/toc.html)
    – probably the best introduction into Coq and theorem proving available
-   [_Certified Programming with Dependent Types_](http://adam.chlipala.net/cpdt/)
    – an awesome book to read after _Software Foundations_; a bit more advanced,
    slightly different topics; puts forth the idea of using automation whenever
    possible
-   [/r/coq](https://www.reddit.com/r/coq)
-   [Coq in a Hurry](https://cel.archives-ouvertes.fr/file/index/docid/475807/filename/coq-hurry.pdf) [PDF]
-   [Introduction to the Coq proof-assistant for practical software
    verication](https://www.lri.fr/~paulin/LASER/course-notes.pdf) [PDF] course notes
    -   Another tutorial, slightly more interesting; possibly outdated
-   [Coq'Art](http://www.labri.fr/perso/casteran/CoqArt/index.html) – the first ever
    book on Coq and CoC
    -   See also [Pierre Castéran's page](http://www.labri.fr/perso/casteran/) for
        _A Tutorial on [Co-]Inductive Types in Coq_ and _A Gentle Introduction to
        Type Classes and Relations in Coq_
-   the [nLab wiki](http://ncatlab.org/nlab/show/HomePage)
    -   [its page on Coq](http://ncatlab.org/nlab/show/Coq), for instance

### Blogs

-   [Poleiro](http://poleiro.info/)
-   [Gagallium](http://gallium.inria.fr/blog/) – blog of the [Gallium research team](http://gallium.inria.fr/) at Inria
-   [_Homotopy Type Theory_ blog](http://homotopytypetheory.org/blog)
    -   [Modules for Modalities](http://homotopytypetheory.org/2015/07/05/modules-for-modalities)
        – an article on Coq's module system and universe polymorphism

## Libraries and plug-ins

-   [Ssreflect and MathComp](http://ssr.msr-inria.inria.fr/)
-   [CoLoR](http://color.inria.fr/)
-   [Coq.io](http://coq.io/) and others by [Guillaume Claret](http://claret.me/)
    ([GitHub](https://github.com/clarus))
-   [Cybele](http://cybele.gforge.inria.fr/) – "A powerful tool to write proofs by reflection in Coq"
-   [Mtac](http://plv.mpi-sws.org/mtac/) – "A Monad for Typed Tactic Programming in Coq "
-   [coq-haskell](https://github.com/jwiegley/coq-haskell)
    -   Applied: [coq-pipes](https://github.com/jwiegley/coq-pipes)
-   [Bedrock](http://plv.csail.mit.edu/bedrock/) (abandoned?)
    -   A. Chlipala: [_The Bedrock Structured Programming System: Combining
        Generative Metaprogramming and Hoare Logic in an Extensible Program
        Verifier_](http://adam.chlipala.net/papers/BedrockICFP13/BedrockICFP13.pdf)
        [PDF]
-   [Ynot](http://ynot.cs.harvard.edu/) (abandoned)
    -   A. Chlipala et al.: [_Effective Interactive Proofs for Higher-Order
        Imperative Programs_](http://ynot.cs.harvard.edu/papers/icfp09.pdf) [PDF]

## Licence

Everything here is licensed under [CC0](http://creativecommons.org/publicdomain/zero/1.0/)
unless indicated otherwise.

<!-- vim: set et ts=4 sw=4: -->
