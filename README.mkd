This repository servers as a log of my endeavour to learn to use and understand
the [Coq](https://coq.inria.fr/) proof assistant. It may contain proofs, attempts
at proofs, links to related resources (blogs, articles, books), notes on type theory,
logic, formal verification, theorem proving, automated reasoning, and much more.

![](http://i.creativecommons.org/p/zero/1.0/80x15.png)

## Useful resources

-   [Official Coq documentation](https://coq.inria.fr/documentation)
    -   The official documentation is OK, quite comprehensive. The description of
        tactics is very good, there are few undocuments points.
    -   [Reference Manual](https://coq.inria.fr/distrib/current/files/Reference-Manual.pdf) [PDF]
    -   [Tutorial](https://coq.inria.fr/distrib/current/files/Tutorial.pdf) [PDF]
        -   A simple and straightforward introduction to basics of proofs using Coq
-   [Cocorico!](https://coq.inria.fr/cocorico/Home) – official wiki
-   The [coq-club](https://sympa.inria.fr/sympa/arc/coq-club) mailing list
-   [_Software Foundations_](http://www.cis.upenn.edu/~bcpierce/sf/current/toc.html)
    – probably the best introduction into Coq and theorem proving available
-   [_Certified Programming with Dependent Types_](http://adam.chlipala.net/cpdt/)
    – an awesome book to read after _Software Foundations_; a bit more advanced,
    slightly different topics; puts forth the idea of using automation whenever
    possible
-   [/r/coq](https://www.reddit.com/r/coq)
-   [Coq in a Hurry](https://cel.archives-ouvertes.fr/file/index/docid/475807/filename/coq-hurry.pdf) [PDF]
-   [Introduction to the Coq proof-assistant for practical software
    verication](https://www.lri.fr/~paulin/LASER/course-notes.pdf) [PDF] course notes
    -   Another tutorial, slightly more interesting; possibly outdated
-   [Coq'Art](http://www.labri.fr/perso/casteran/CoqArt/index.html) – the first ever
    book on Coq and CoC
    -   See also [Pierre Castéran's page](http://www.labri.fr/perso/casteran/) for
        _A Tutorial on [Co-]Inductive Types in Coq_ and _A Gentle Introduction to
        Type Classes and Relations in Coq_
-   the [nLab wiki](http://ncatlab.org/nlab/show/HomePage)
    -   [its page on Coq](http://ncatlab.org/nlab/show/Coq), for instance

### Blogs

-   [Poleiro](http://poleiro.info/)
-   [Gagallium](http://gallium.inria.fr/blog/) – blog of the [Gallium research team](http://gallium.inria.fr/) at Inria
-   [Coq en Stock](http://goto.ucsd.edu/~vrobert/coq-en-stock/blog/)
-   [_Homotopy Type Theory_ blog](http://homotopytypetheory.org/blog)
    -   [Modules for Modalities](http://homotopytypetheory.org/2015/07/05/modules-for-modalities)
        – an article on Coq's module system and universe polymorphism

## Libraries and plug-ins

-   [Ssreflect and MathComp](http://ssr.msr-inria.inria.fr/)
    -   [_A Small Scale Reflection Extension for the Coq system_](https://hal.inria.fr/inria-00258384/en)
    -   [_Computing with Univalence_](http://dlicata.web.wesleyan.edu/pubs/lh122tttalks/lh12hdact-slides.pdf)
        [PDF] (2008; slides)
-   [CoLoR](http://color.inria.fr/) – "a Coq Library on rewriting and termination"
-   [coq-ext-lib](https://github.com/coq-ext-lib/coq-ext-lib) – "a collection of
    theories and plugins that may be useful in other Coq developments"
-   [Equations](http://www.pps.univ-paris-diderot.fr/~sozeau/research/coq/equations.en.html) – dependent pattern matching
-   [Mtac](http://plv.mpi-sws.org/mtac/) – "a monad for typed tactic programming in Coq "
-   [cases plug-in](https://github.com/pilki/cases) – extended suppot for `(S*)Case`
    as featured in _Software Foundations_
-   [Coq.io](http://coq.io/) and others by [Guillaume Claret](http://claret.me/)
    ([GitHub](https://github.com/clarus))
-   [Cybele](http://cybele.gforge.inria.fr/) – "a powerful tool to write proofs by reflection in Coq"
-   [Verdi](https://github.com/uwplse/verdi) – "a framework for formally verifying
    distributed systems implementations in Coq"
-   [coq-haskell](https://github.com/jwiegley/coq-haskell)
    -   Applied: [coq-pipes](https://github.com/jwiegley/coq-pipes)
-   [wilcoxjay/tactics](https://github.com/wilcoxjay/tactics) – some useful tactics
    by James Wilcox
-   [Verified Software Toolchain](http://vst.cs.princeton.edu/)
    -   tons of articles around this
    -   A\. W. Appel: [_Verified Software Toolchain_](https://www.cs.princeton.edu/~appel/papers/vst.pdf)
-   [Bedrock](http://plv.csail.mit.edu/bedrock/) (abandoned?)
    -   A\. Chlipala: [_The Bedrock Structured Programming System: Combining
        Generative Metaprogramming and Hoare Logic in an Extensible Program
        Verifier_](http://adam.chlipala.net/papers/BedrockICFP13/BedrockICFP13.pdf)
        [PDF]
-   [Ynot](http://ynot.cs.harvard.edu/) (abandoned)
    -   A\. Chlipala et al.: [_Effective Interactive Proofs for Higher-Order
        Imperative Programs_](http://ynot.cs.harvard.edu/papers/icfp09.pdf) [PDF]

## Applications

-   [CompCert](http://compcert.inria.fr/) – verified optimising compiler of
    a substantial subset of C99
-   [Verasco](http://compcert.inria.fr/verasco/) – verified static analyser
-   [JSCert: Certified JavaScript](http://jscert.org)
    -   [_A Trusted Machnised JavaScript Specification_](http://www.doc.ic.ac.uk/~gds/jscert_popl14.pdf)
        (2014; [slides](http://jscert.org/popol14))
-   [_A Machine-Checked Proof of the Odd Order Theorem_](http://www.cs.unibo.it/~asperti/PAPERS/odd_order.pdf)
-   [_A Reflexive Formalization of a SAT Solver in Coq_](https://www.lri.fr/~conchon/publis/lescuyer-conchon-tphols08.pdf)
    [PDF] (2008)
-   [_Towards an effective formally certfied constraint solver_](http://cp2014.a4cp.org/sites/default/files/uploads/DuboisGotlieb-slides.pdf)
    [PDF]\ (2014; slides)

### Papers and articles

-   [Heq: a Coq library for Heterogeneous Equality](http://sf.snu.ac.kr/gil.hur/Heq/)
-   [_Inductive-inductive definitions_](http://personal.cis.strath.ac.uk/fredrik.nordvall-forsberg/thesis/thesis.pdf)
-   [_Gradual Certified programming in Coq_](http://arxiv.org/abs/1506.04205)
-   [_An intro to (co)algebra and
    (co)induction_](http://homepages.cwi.nl/~janr/papers/files-of-papers/2011_Jacobs_Rutten_new.pdf)
-   [_Canonical Structures for the Working Coq User_](https://www.reddit.com/r/Coq/comments/3erkgv/canonical_structures_for_the_working_coq_user/)
-   [_Foundational Property-Based Testing_](https://hal.inria.fr/hal-01162898)
    – _QuickChick_, a port of _QuickCheck_ to Coq
-   [_How to express convergence for analysis in Coq_](https://hal.inria.fr/hal-01169321)
    -   <http://coquelicot.saclay.inria.fr/>

## Related languages, tools and stuff

-   see also [page on the Coq website](https://coq.inria.fr/related-tools)
-   [_Homotopy Type Theory_](http://homotopytypetheory.org/) – the book and [the library](https://github.com/HoTT/HoTT)
    -   [Coq for Homotopy Type Theory](http://tabareau.fr/coqhott) – a dedicated research project
-   [UniMath](https://github.com/UniMath/UniMath) (_Univalent Foundations_)
-   [Lean](https://leanprover.github.io/) – a new theorem prover developed by Microsoft and CMU with
    automation support; looks a lot like Coq
-   [Agda](http://wiki.portal.chalmers.se/agda/pmwiki.php) – a (relatively) new, hip dependently-typed
    functional language and proof assistant
-   [Idris](http://www.idris-lang.org/) – another new and hip "general purpose" language with dependent
    types, support for theorem proving and tactics; kind of like Coq-flavoured Haskell
-   [PRL](http://www.nuprl.org/)
-   [Isabelle](https://isabelle.in.tum.de/)
    -   [Haskabelle](https://isabelle.in.tum.de/haskabelle.html)
-   [HOL Light](https://www.cl.cam.ac.uk/~jrh13/hol-light/)
-   [HOL4](http://hol.sourceforge.net/)
-   [ProofPower](http://www.lemma-one.com/ProofPower/index/)
-   [Mizar](http://mizar.org/)
-   [ACL2](https://www.cs.utexas.edu/users/moore/acl2/)
-   [Milawa](https://www.cs.utexas.edu/users/jared/milawa/Web/)
    -   [_The reflective Milawa theorem prover is sound_](https://www.cs.utexas.edu/users/jared/publications/2015-jar-milawa.pdf) (2015)
-   [ATS language](http://www.ats-lang.org/)
-   [F7](http://research.microsoft.com/en-us/projects/f7/)
-   [F\*](https://www.fstar-lang.org/) – "a new higher order, effectful programming language designed
    with program verification in mind"
-   [Twelf](http://twelf.org/wiki/Main_Page)
-   [Celf](https://clf.github.io/celf/)
-   [Why3](http://why3.lri.fr/)
    -   [Gallery of verified programs](http://toccata.lri.fr/gallery/)
    -   [_Shepherd Your Herd of Provers_](http://research.microsoft.com/en-us/um/people/moskal/boogie2011/boogie2011_pg53.pdf) (2011)
-   [Alloy](http://alloy.mit.edu/alloy/index.html) – "a language and tool for relational models"
-   [The QED Manifesto](http://www.cs.ru.nl/~freek/qed/qed.html)
-   [Formalizing 100 Theorems](http://www.cs.ru.nl/~freek/100/index.html)
-   [Verified Software Competition](http://vscomp.org/)
-   [jozefg/learn-tt](https://github.com/jozefg/learn-tt) – "a collection of resources for learning type theory"
-   [Oregon Programming Languages Summer School](https://www.cs.uoregon.edu/research/summerschool/) – videos of _awesome_ talks on type theory, provers, logic, etc.; earlier editions only have lectures notes and slides published

    [2015](https://www.cs.uoregon.edu/research/summerschool/summer15/curriculum.html),
    [2014](https://www.cs.uoregon.edu/research/summerschool/summer14/curriculum.html),
    [2013](https://www.cs.uoregon.edu/research/summerschool/summer13/curriculum.html),
    [2012](https://www.cs.uoregon.edu/research/summerschool/summer12/curriculum.html),
    [2011](https://www.cs.uoregon.edu/research/summerschool/summer11/curriculum.html),
    [2010](https://www.cs.uoregon.edu/research/summerschool/summer10/curriculum.html),
    [2009](https://www.cs.uoregon.edu/research/summerschool/summer09/curriculum.html),
    [2008](https://www.cs.uoregon.edu/research/summerschool/summer08/curriculum.html),
    [2007](https://www.cs.uoregon.edu/research/summerschool/summer07/curriculum.html),
    [2006](https://www.cs.uoregon.edu/research/summerschool/summer06/curriculum.html),
    [2005](https://www.cs.uoregon.edu/research/summerschool/summer05/curriculum.html)

## Licence

Everything here is licensed under [CC0](http://creativecommons.org/publicdomain/zero/1.0/)
unless indicated otherwise.

<!-- vim: set et ts=4 sw=4: -->
