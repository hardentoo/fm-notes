This repository serves as a log of my endeavour to learn to use and understand
the [Coq](https://coq.inria.fr/) proof assistant. It may contain proofs, attempts
at proofs, links to related resources (blogs, articles, papers, books), notes on
logic, type theory, formal verification, theorem proving, automated reasoning, and
much more.

I will try to only include things that seem useful, informative, interesting or cool,
things that I forget, and tips and warnings regarding the subtleties of Coq.
Therefore, if you want to learn Coq from scratch, I suggest you try one of the
resources listed [below](#useful-resources).

I do not claim completeness, correctness, consistency or usefulness of any
information contained herein.

![](http://i.creativecommons.org/p/zero/1.0/80x15.png)

---

-   [On Coq](#on-coq)
-   [Tactics](#tactics)
-   [Useful resources](#useful-resources)
    -   [Blogs](#blogs)
-   [Libraries and plug-ins](#libraries-and-plug-ins)
-   [Applications](#applications)
    -   [Papers and articles](#papers-and-articles)
-   [Related languages, tools and stuff](#related-languages-tools-and-stuff)
    -   [Journals and book series](#journals-and-book-series)
    -   [Conferences and workshops](#conferences-and-workshops)
    -   [Proof assistants, provers and languages](#proof-assistants-provers-and-languages)
    -   [SAT &amp; SMT solvers](#sat--smt-solvers)
    -   [Other tools](#other-tools)
    -   [Formal methods in practice](#formal-methods-in-practice)
    -   [Learning resources](#learning-resources)
-   [Type theory](#type-theory)
    -   [Dependent types](#dependent-types)
-   [Copyright](#copyright)

## On Coq

Coq is an interactive theorem prover and proof assistant based on an intensinoal
intuitionistic type theory. The underlying formalism is called Calculus of
Constructions (CoC) which is a dependently-typed λ-calculus and higher-order
constructive logic. Its core is written in OCaml.

<!-- *TODO:* Slap some papers on the formal stuff around here -->

## Tactics

Standard Coq contains many tactics for working with the proof state, some of which
may be confused easily. The documentation on tactics may be the most informative and
thorough part of the Coq reference manual, so it's worth a read if you're looking for
a way to make your proofs more concise. See the [Tactics Index](https://coq.inria.fr/distrib/current/refman/tactic-index.html)
and [Chapter 8: Tactics](https://coq.inria.fr/distrib/current/refman/Reference-Manual010.html)
in the reference manual.

The Ssreflect libary (see below) contains a more sensible and consistent set of
tactics. Although its syntax is very different from the Coq standard, don't let
this discourage you.

## Useful resources

-   [Official Coq documentation](https://coq.inria.fr/documentation)
    -   The official documentation is OK, quite comprehensive. The description of
        tactics is very good, there are few undocuments points.
    -   [Reference Manual](https://coq.inria.fr/distrib/current/files/Reference-Manual.pdf)
    -   [Tutorial](https://coq.inria.fr/distrib/current/files/Tutorial.pdf)
        -   A simple and straightforward introduction to basics of proofs using Coq
-   [Cocorico!](https://coq.inria.fr/cocorico/Home) – official wiki
-   The [coq-club](https://sympa.inria.fr/sympa/arc/coq-club) mailing list
-   B\. C. Pierce et al.: [_Software Foundations_](http://www.cis.upenn.edu/~bcpierce/sf/current/)
    – probably the best introduction into Coq and theorem proving available
-   A\. Chlipala: [_Certified Programming with Dependent Types_](http://adam.chlipala.net/cpdt/)
    – an awesome book to read after _Software Foundations_; a bit more advanced,
    slightly different topics; puts forth the idea of using automation whenever
    possible
-   I\. Sergey: [_Programs and Proofs: Mechanizing Mathematics with Dependent Types_](http://ilyasergey.net/pnp/) (draft)
-   [/r/coq](https://www.reddit.com/r/coq)
-   [Coq in a Hurry](https://cel.archives-ouvertes.fr/file/index/docid/475807/filename/coq-hurry.pdf)
-   [Introduction to the Coq proof-assistant for practical software
    verication](https://www.lri.fr/~paulin/LASER/course-notes.pdf) course notes
    -   Another tutorial, slightly more interesting; possibly outdated
-   [Coq'Art](http://www.labri.fr/perso/casteran/CoqArt/index.html) – the first ever
    book on Coq and CoC
    -   See also [Pierre Castéran's page](http://www.labri.fr/perso/casteran/) for
        _A Tutorial on [Co-]Inductive Types in Coq_ and _A Gentle Introduction to
        Type Classes and Relations in Coq_
-   the [nLab wiki](http://ncatlab.org/nlab/show/HomePage)
    -   [its page on Coq](http://ncatlab.org/nlab/show/Coq), for instance

### Blogs

-   [Poleiro](http://poleiro.info/)
-   [Gagallium](http://gallium.inria.fr/blog/) – blog of the [Gallium research team](http://gallium.inria.fr/) at Inria
-   Guillaume Claret's [Coq blog](http://coq-blog.clarus.me/)
-   [Coq en Stock](http://goto.ucsd.edu/~vrobert/coq-en-stock/blog/)
-   [_Homotopy Type Theory_ blog](http://homotopytypetheory.org/blog)
    -   [Modules for Modalities](http://homotopytypetheory.org/2015/07/05/modules-for-modalities)
        – an article on Coq's module system and universe polymorphism
-   [The Type Theory Podcast](http://typetheorypodcast.com/)

## Libraries and plug-ins

-   [Ssreflect and MathComp](http://ssr.msr-inria.inria.fr/)
    -   [_A Small Scale Reflection Extension for the Coq system_](https://hal.inria.fr/inria-00258384/en)
    -   [_Computing with Univalence_](http://dlicata.web.wesleyan.edu/pubs/lh122tttalks/lh12hdact-slides.pdf)
        (2008; slides)
-   [CoLoR](http://color.inria.fr/) – "a Coq Library on rewriting and termination"
-   [GeoCoq](https://geocoq.github.io/GeoCoq/) – formalization of geometry based on
    Tarski's axiom system
-   [coq-ext-lib](https://github.com/coq-ext-lib/coq-ext-lib) – "a collection of
    theories and plugins that may be useful in other Coq developments"
-   [Equations](http://www.pps.univ-paris-diderot.fr/~sozeau/research/coq/equations.en.html)
    – dependent pattern matching
-   [Mtac](http://plv.mpi-sws.org/mtac/) – "a monad for typed tactic programming in Coq"
-   [cases plug-in](https://github.com/pilki/cases) – extended support for `S*Case`
    as featured in _Software Foundations_
-   [wilcoxjay/tactics](https://github.com/wilcoxjay/tactics) – some useful tactics
    by James Wilcox
-   ["A Formal Library for Elliptic Curves in the Coq Proof Assistant"](https://dx.doi.org/10.1007/978-3-319-08970-6_6)
    ([GitHub](https://github.com/strub/elliptic-curves-ssr))
-   [multinomials](https://github.com/strub/multinomials-ssr) – a Coq/SSReflect
    library for multinomials
-   [Coquelicot](http://coquelicot.saclay.inria.fr/) – library for real analysis
    -   C\. Lelay (2015): [_How to express convergence for analysis in Coq_](https://hal.inria.fr/hal-01169321)
-   [domain theory in Coq](http://rwd.rdockins.name/domains/)
-   [Coq.io](http://coq.io/) and others by [Guillaume Claret](http://claret.me/)
    ([GitHub](https://github.com/clarus))
-   [Cybele](http://cybele.gforge.inria.fr/) – "a powerful tool to write proofs by
    reflection in Coq"
-   [Verdi](https://github.com/uwplse/verdi) – "a framework for formally verifying
    distributed systems implementations in Coq"
-   [coq-haskell](https://github.com/jwiegley/coq-haskell)
    -   Applied: [coq-pipes](https://github.com/jwiegley/coq-pipes)
-   [CFML](http://www.chargueraud.org/softs/cfml/): Characteristic Formulae for ML
    – verification of correctness and amortized complexity of OCaml programs
    -   [A series of blog posts](http://gallium.inria.fr/~scherer/gagallium/formally-verified-complexity-with-cfml-part-1/)
        on the Gagallium blog on verifying complexity
-   [TLC](http://www.chargueraud.org/softs/tlc/): "a non-constructive library for Coq"
    – extensionality as an axiom, classical logic by default, etc.
-   [Verified Software Toolchain](http://vst.cs.princeton.edu/)
    -   tons of articles around this
    -   A\. W. Appel: [_Verified Software Toolchain_](https://www.cs.princeton.edu/~appel/papers/vst.pdf)
-   [Bedrock](http://plv.csail.mit.edu/bedrock/) (abandoned?)
    -   A\. Chlipala: [_The Bedrock Structured Programming System: Combining
        Generative Metaprogramming and Hoare Logic in an Extensible Program
        Verifier_](http://adam.chlipala.net/papers/BedrockICFP13/BedrockICFP13.pdf)
-   [Ynot](http://ynot.cs.harvard.edu/) (abandoned)
    -   A\. Chlipala et al.: [_Effective Interactive Proofs for Higher-Order
        Imperative Programs_](http://ynot.cs.harvard.edu/papers/icfp09.pdf)
-   ["Category Theory in Coq 8.5"](http://arxiv.org/abs/1505.06430) ([Bitbucket](https://bitbucket.org/amintimany/categories/); Coq Workshop 2014)
-   [CH2O](http://robbertkrebbers.nl/research/ch2o/) – formalization of ISO C11
    by [Rober Krebbers](http://robbertkrebbers.nl/thesis.html)
    ([GitHub](https://github.com/robbertkrebbers/ch2o))
    -   ["Formalizing C in Coq"](https://coqpl.cs.washington.edu/wp-content/uploads/2014/12/ch2o.pdf)
        ([CoqPL 2015](https://coqpl.cs.washington.edu/))

## Applications

-   [CertiCrypt](http://certicrypt.gforge.inria.fr/) – Computer-Aided Cryptographic Proofs in Coq
    -   [_Formal certification of ElGamal encryption_](http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.220.6617) (2008)
-   [CompCert](http://compcert.inria.fr/) – verified optimising compiler of
    a substantial subset of C99
-   [Verasco](http://compcert.inria.fr/verasco/) – verified static analyser
-   [JSCert: Certified JavaScript](http://jscert.org)
    -   [_A Trusted Machnised JavaScript Specification_](http://www.doc.ic.ac.uk/~gds/jscert_popl14.pdf)
        (2014; [slides](http://jscert.org/popol14))
-   [_A Machine-Checked Proof of the Odd Order Theorem_](http://www.cs.unibo.it/~asperti/PAPERS/odd_order.pdf)
-   [_A Reflexive Formalization of a SAT Solver in Coq_](https://www.lri.fr/~conchon/publis/lescuyer-conchon-tphols08.pdf)
    (2008)
-   [_Towards an effective formally certfied constraint solver_](http://cp2014.a4cp.org/sites/default/files/uploads/DuboisGotlieb-slides.pdf)
    (2014; slides)

### Papers and articles

-   [Heq: a Coq library for Heterogeneous Equality](http://sf.snu.ac.kr/gil.hur/Heq/)
-   [_Inductive-inductive definitions_](http://personal.cis.strath.ac.uk/fredrik.nordvall-forsberg/thesis/thesis.pdf)
-   [_Gradual Certified programming in Coq_](http://arxiv.org/abs/1506.04205)
-   [_An intro to (co)algebra and
    (co)induction_](http://homepages.cwi.nl/~janr/papers/files-of-papers/2011_Jacobs_Rutten_new.pdf)
-   [_Canonical Structures for the Working Coq User_](https://www.reddit.com/r/Coq/comments/3erkgv/canonical_structures_for_the_working_coq_user/)
-   [_Foundational Property-Based Testing_](https://hal.inria.fr/hal-01162898)
    – _QuickChick_, a port of _QuickCheck_ to Coq
-   J\. Gross: ["Coq Bug Minimizer"](https://coqpl.cs.washington.edu/wp-content/uploads/2014/12/bug-minimizer.pdf)
    (CoqPL 2015; [GitHub](https://github.com/JasonGross/coq-tools))

## Related languages, tools and stuff

Numerous journals, conferences and workshops, for instance, the _Journal of Automated
Reasoning_, POPL, and CoqPL. For tools, see also [page on the Coq website](https://coq.inria.fr/related-tools).

-   [_Homotopy Type Theory_](http://homotopytypetheory.org/) – the book and [the library](https://github.com/HoTT/HoTT)
    -   [Coq for Homotopy Type Theory](http://tabareau.fr/coqhott) – a dedicated research project
-   [UniMath](https://github.com/UniMath/UniMath) (_Univalent Foundations_)

Related ACM Special Interest Groups: [SIGPLAN](http://www.sigplan.org/),
[SIGLOG](http://siglog.org/) and [SIGACT](http://www.sigact.org/).

### Journals and book series

(† denotes open-access journals)

-   [_Logical Methods in Computer Science_](http://lmcs-online.org/index.php)&thinsp;†
-   [_LIPIcs: Leibniz International Proceedings in Informatics_](http://www.dagstuhl.de/en/publications/lipics/)&thinsp;†
-   _International Journal of Foundations of Computer Science_
-   [_Information and Computation_](http://www.journals.elsevier.com/information-and-computation)
-   [_Journal of Automated Reasoning_](https://www.springer.com/computer/theoretical+computer+science/journal/10817)
-   Springer's [_Lecture Notes in Computer Science_](http://link.springer.com/bookseries/558) series

**Meta**

-   [ACM Journals/Transactions](https://dl.acm.org/pubs.cfm)
-   [Elsevier journals](https://www.elsevier.com/journals/subjects/computer-science/title/all) on computer science
-   [Springer journals](http://link.springer.com/search?facet-discipline=%22Computer+Science%22&facet-content-type=%22Journal%22) on CS
-   [Cambridge Journals](http://journals.cambridge.org/action/bySubjectArea#subject8) on CS

### Conferences and workshops

I've divided the events into a few disjoint categories, although, naturally, there
will be a significant overlap in the topics covered by events in two different
categories.

**Coq**

-   International Workshop on Coq for PL (CoqPL)
-   [Coq Workshop](https://coq.inria.fr/coq-workshop)

**Type theory and foundations**

-   Workshop on Homotopy Type Theory and Univalent Foundations of Mathematics
-   International Conference on Types for Proofs and Programs (TYPES)
-   [International Conference on Typed Lambda Calculi and Applications](http://www.mimuw.edu.pl/tlca/) (TLCA)
-   Conference on Algebra and Coalgebra in Computer Science (CALCO)
-   International Symposium on Theoretical Aspects of Computer Science (STACS)
-   [Symposium on Foundations of Computer Science](http://ieee-focs.org) (FOCS)
-   International Conference on Foundations of Software Science and Computation Structures (FoSSaCS)
-   International Symposium on Mathematical Foundations of Computer Science (MFCS)
-   SICSA Summer School on Practical Types

**Logic, theorem proving and automated reasoning**

-   Federated Logic Conference (FLoC)
-   IEEE Symposium on Logic in Computer Science (LICS)
-   Annual Conference on Computer Science Logic (CSL)
-   International Conference on Logic Programming (ICLP)
-   [Conference on Theory and Applications of Satisfiability Testing](http://www.satisfiability.org/) (SAT)
-   [International Workshop on Classical Logic and Computation](http://www.di.unito.it/~stefano/CL&C/CL&C.htm) (CL&C)
-   Conference on Automated Reasoning with Analytic Tableaux and Related Methods (TABLEAUX)
-   Conference on Automated Deduction (CADE)
-   International Joint Conference on Automated Reasoning (IJCAR)
-   [Artificial Intelligence and Theorem Proving](http://colo12-c703.uibk.ac.at/) (AITP)
-   Interactive Theorem Proving (ITP) [2015](http://www.inf.kcl.ac.uk/staff/urbanc/itp-2015/)
-   Theorem Proving in Higher Order Logics (TPHOLs)
-   [International Workshop on Satisfiability Modulo Theories](http://smt-workshop.cs.uiowa.edu/) (SMT)
-   SAT/SMT Summer School [2015](http://smt2015.csl.sri.com/school/)

**Formal methods**

-   International Symposium on Formal Methods (FM)
-   NASA Formal Methods Symposium (NFM)
-   Conference on Certified Programs and Proofs (CPP)
-   Conference on Automated Verification (CAV)
-   International Symposium on Automated Technology for Verification and Analysis (ATVA)
-   [International Workshop on Automated Verification of Critical Systems](http://www.cs.swan.ac.uk/avocs/) (AVoCS)
-   Higher-Dimensional Rewriting and Applications (HDRA)
-   International Conference on Rewriting, Deduction, and Programming (RDP)
-   [International Conference on Rewriting Techniques and Applications](http://rewriting.loria.fr/rta/) (RTA)
-   [Formal Structures for Computation and Deduction](http://fscdconference.org/) (FSCD)
-   Computer Security Foundations Symposium (CSF)
-   International Conference on Tools and Algorithms for the Construction and Analysis of Systems (TACAS)
-   [International Symposia on Formal Methods for Components and Objects](http://liacs.leidenuniv.nl/~bonsanguemm/fmco/) (FMCO)
-   Summer School on Formal Techniques [2015](http://fm.csl.sri.com/SSFT15/)

**Programming languages**

This includes compilers and related stuff, too.

-   Symposium on Principles of Programming Languages (POPL)
-   Summit on Advances in Programming Languages (SNAPL)
    -   [1st proceedings in PDF](http://drops.dagstuhl.de/opus/volltexte/lipics-complete/lipics-vol32-snapl2015-complete.pdf) (2015)
-   [The International Conference on Functional Programming](http://icfpconference.org/) (ICFP)
    -   [CUFP](http://cufp.org/) workshop
-   International Colloquium on Automata, Languages and Programming (ICALP)
-   International Conference on Language and Automata Theory and Applications (LATA)
-   International Conference on Compiler Construction (CC)
-   European Symposium on Programming (ESOP)
-   Programming Language Design and Implementation (PLDI)
-   [European Conference on Object-Oriented Programming](http://ecoop.org/) (ECOOP)
-   [International Symposium on Memory Management](http://www.sigplan.org/Conferences/ISMM/) (ISMM)
-   [Programming Language Design and Implementation](http://www.sigplan.org/Conferences/PLDI/) (PLDI)
-   [Languages, Compilers, Tools and Theory for Embedded Systems](http://lctes2015.lctes.org/) (LCTES)
-   [Dynamic Languages Symposium](http://www.dynamic-languages-symposium.org/) (DLS)
-   Practical Aspects of Declarative Languages (PADL)
-   Mathematical Foundations of Programming Semantics (MFPS)
-   [C◦mp◦se :: Conference](http://www.composeconference.org/)
-   [Curry On!](http://www.curry-on.org/) conference
-   Summer School on DSL Design and Implementation [2015](https://vjovanov.github.io/dsldi-summer-school/)
-   [Central-European Functional Programming School](http://people.inf.elte.hu/cefp/) (CEFP)
-   Workshop on Probabilistic Programming Semantics (PPS)
-   Symposium on Trends in Functional Programming (TFP)

**General/other**

This includes software engineering, security and tons of other fields.

-   [European Joint Conferences on Theory and Practice of Software](http://www.etaps.org/) (ETAPS)
-   International Conference on Fundamental Approaches to Software Engineering (FASE)
-   [Doctoral Workshop on Mathematical and Engineering Methods in Computer Science](http://www.memics.cz/) (MEMICS)
-   International Conference on Principles of Security and Trust (POST)
-   Conference on Intelligent Computer Mathematics (CICM)

**Meta**

-   [Computer Science Conferences](http://csconf.net) website
-   Microsoft Academic Search – [Top conferences in CS](http://academic.research.microsoft.com/?SearchDomain=2&entitytype=3)
-   [Top Crypto and Security Conferences Ranking](http://icsd.i2r.a-star.edu.sg/staff/jianying/conference-ranking.html)

### Proof assistants, provers and languages

-   [Lean](https://leanprover.github.io/) – a new theorem prover developed by Microsoft and CMU with
    automation support; based on CIC, supports HoTT as well
-   [Matita](http://matita.cs.unibo.it/) – based on (a variant of) CoC
-   [Agda](http://wiki.portal.chalmers.se/agda/pmwiki.php) – a (relatively) new, hip dependently-typed
    functional language and interactive theorem prover
    -   [Agda Tutorial](http://people.inf.elte.hu/divip/AgdaTutorial/Index.html)
-   [Idris](http://www.idris-lang.org/) – another new and hip "general purpose" language with dependent
    types, support for theorem proving and tactics; kind of like Coq-flavoured Haskell
-   [Dedukti](http://dedukti.gforge.inria.fr/) – proof checker based on the
    λΠ-calculus; tools for translation from other proof assistants available
-   [the PRL Project](http://www.nuprl.org/) a.k.a. Nuprl
    -   [MetaPRL](http://metaprl.org/default.html)
    -   [JonPRL](http://www.jonprl.org) ([GitHub](https://github.com/jonsterling/jonprl))
        – a reimplementation of Nuprl by Jon Sterling, Danny Gratzer and Vincent Rahli
-   [MetaPRL](http://metaprl.org/default.html)
-   [Isabelle](https://isabelle.in.tum.de/) – great [Archive of Formal Proofs](http://afp.sourceforge.net/);
    small trusted meta-logical core, usually used along with HOL
    -   [Haskabelle](https://isabelle.in.tum.de/haskabelle.html)
    -   [Isar](https://isabelle.in.tum.de/Isar/)
    -   Isabelle/HOLCF – [paper](https://www21.in.tum.de/~nipkow/pubs/jfp99.html),
        [tutorial](https://isabelle.in.tum.de/library/HOL/HOLCF-Tutorial/document.pdf)
-   [HOL](http://www.cl.cam.ac.uk/research/hvg/HOL/) by Michael Gordon et al. – the
    original system for interactive theorem proving in higher-order logic
    -   [HOL Light](https://www.cl.cam.ac.uk/~jrh13/hol-light/) – small trusted core
    -   [HOL4](http://hol.sourceforge.net/)
-   [MINLOG](http://www.mathematik.uni-muenchen.de/~logik/minlog) – interactive proof
    assistant based on first-order natural deduction calculus
-   [ProofPower](http://www.lemma-one.com/ProofPower/index/) – based on higher-order
    logic
-   [Mizar](http://mizar.org/)
-   [ACL2](https://www.cs.utexas.edu/users/moore/acl2/) (_A Computational Logic for
    Applicative Common Lisp_) – logic for modelling systems and a complementary
    prover; based on first-order logic
-   [Milawa](https://www.cs.utexas.edu/users/jared/milawa/Web/) – theorem prover for
    ACL2-like logic
    -   [_The reflective Milawa theorem prover is sound_](https://www.cs.utexas.edu/users/jared/publications/2015-jar-milawa.pdf) (2015)
-   [ATS](http://www.ats-lang.org/) (_Applied Type System_) – dependently typed
    functional languge
-   [E](http://wwwlehre.dhbw-stuttgart.de/~sschulz/E/E.html) theorem prover for first-order logic
-   [LEGO](http://www.dcs.ed.ac.uk/home/lego/) proof assistant
-   [F7](http://research.microsoft.com/en-us/projects/f7/) – extension of F#'s type
    system with refinement types, dependent types and π-calculus-style concurrency
-   [F\*](https://www.fstar-lang.org/) – "a new higher order, effectful programming
    language designed with program verification in mind"
-   [Eff](http://www.eff-lang.org/) – functional language with first-class effects
    and native handling of all kinds of computatinal effects without touching monads
-   [Twelf](http://twelf.org/wiki/Main_Page)
-   [Celf](https://clf.github.io/celf/)
-   [Prover9 and Mace4](https://www.cs.unm.edu/~mccune/prover9/) – and automated
    theorem prover for FOL and searchr for counterexamples, respectively
-   [leanCOP](http://www.leancop.de/) – tiny automated theorem prover for classical
    first-order logic implemented in Prolog
-   [PVS](http://pvs.csl.sri.com/)
-   [Abella](http://abella-prover.org/)

### SAT & SMT solvers

-   [MiniSat](http://minisat.se/)
-   [PicoSAT](http://fmv.jku.at/picosat)
-   [Z3](https://github.com/Z3Prover/z3)
-   [CVC4](http://cvc4.cs.nyu.edu/web/)
-   [Alt-Ergo](http://alt-ergo.ocamlpro.com/) ([academic page](http://alt-ergo.lri.fr/))
-   [Yices](http://yices.csl.sri.com/) (non-free licence)
-   [MathSAT 5](http://mathsat.fbk.eu/)
-   [Boolector](http://fmv.jku.at/boolector/)
-   [Lingeling, Plingeling and Treengeling](http://fmv.jku.at/lingeling/)
-   [CryptoMiniSat 2](http://www.msoos.org/cryptominisat2/)
-   [SONOLAR](http://www.informatik.uni-bremen.de/agbs/florian/sonolar/) – Solver for Non-Linear Arithmetic
-   [ABC](http://vlsicad.eecs.umich.edu/BK/Slots/cache/www-cad.eecs.berkeley.edu/~alanmi/abc/) – "A System for Sequential Synthesis and Verification"
-   [funsat](https://hackage.haskell.org/package/funsat) – "a modern DPLL-style SAT
    solver" written in Haskell
-   [_Simple SMT solver for use in an optimizing compiler_](http://www.well-typed.com/blog/103/)
-   [SAT Competitions](http://www.satcompetition.org/)
-   Configurable SAT Solver Challenge (CSSC) [2014](http://aclib.net/cssc2014/)

### Other tools

-   [Why3](http://why3.lri.fr/) – platform for deductive reasoning on programs with
    support for many external provers
    -   [Gallery of verified programs](http://toccata.lri.fr/gallery/)
    -   [_Shepherd Your Herd of Provers_](http://research.microsoft.com/en-us/um/people/moskal/boogie2011/boogie2011_pg53.pdf) (2011)
-   [Alloy](http://alloy.mit.edu/alloy/index.html) – "a language and tool for relational models"
-   [Boogie](http://research.microsoft.com/en-us/projects/boogie/) – intermediate verification language
-   [Dafny](http://research.microsoft.com/en-us/projects/dafny/) – "a language and
    program verifier for functional correctness"
-   [IKOS](http://ti.arc.nasa.gov/opensource/ikos/) – "library designed to facilitate
    the development of sound static analyzers based on Abstract Interpretation"
-   [Crab](https://github.com/seahorn/crab) – "language agnostic engine to perform
    static analysis based on abstract interpretation"
-   [Seahorn](https://seahorn.github.io/) – "fully automated verification framework
    for LLVM-based languages"
-   [rise4fun](http://rise4fun.com/) – a collection of numerous tools, i.a. for
    program and algorithm analysis and verification, by Microsoft Research, CMU and
    others that you can try right on the web page
-   [Profound](http://chaudhuri.info/software/profound/) – "an experiment in
    subformula linking as an interaction method"
    -   K\. Chaudhuri: [_Subformula Linking as an Interaction Method_](http://chaudhuri.info/papers/itp13link.pdf) (2013)

### Formal methods in practice

-   [seL4](http://sel4.systems/) – first fully verified and open-sourced OS kernel
-   [Muen Separation Kernel](http://muen.sk/) – first open-source kernel verified for
    absence of runtime errors ([Reddit discussion](https://www.reddit.com/r/programming/comments/1sjyop/the_muen_separation_kernel_is_the_worlds_first/))
-   [CertiKOS](http://flint.cs.yale.edu/certikos/) – "advanced development of certified OS kernels"
-   [Galois, Inc.](https://galois.com) and anything they do

### Learning resources

Courses, textbooks, papers, theses, competitions, influential figures in the field.

-   [The QED Manifesto](http://www.cs.ru.nl/~freek/qed/qed.html), some more details
    [here](http://www.rbjones.com/rbjpub/logic/qedres00.htm)
-   [Formalizing 100 Theorems](http://www.cs.ru.nl/~freek/100/index.html)
-   [Verified Software Competition](http://vscomp.org/)
-   [VerifyThis](http://www.verifythis.org/) – a competition and collection of
    problems in formal verification of algorithms and software
-   [Oregon Programming Languages Summer School](https://www.cs.uoregon.edu/research/summerschool/) –
    videos of _awesome_ lectures on type theory, provers, logic, etc.; earlier
    editions only have lectures notes and slides published

    [2015](https://www.cs.uoregon.edu/research/summerschool/summer15/curriculum.html),
    [2014](https://www.cs.uoregon.edu/research/summerschool/summer14/curriculum.html),
    [2013](https://www.cs.uoregon.edu/research/summerschool/summer13/curriculum.html),
    [2012](https://www.cs.uoregon.edu/research/summerschool/summer12/curriculum.html),
    [2011](https://www.cs.uoregon.edu/research/summerschool/summer11/curriculum.html),
    [2010](https://www.cs.uoregon.edu/research/summerschool/summer10/curriculum.html),
    [2009](https://www.cs.uoregon.edu/research/summerschool/summer09/curriculum.html),
    [2008](https://www.cs.uoregon.edu/research/summerschool/summer08/curriculum.html),
    [2007](https://www.cs.uoregon.edu/research/summerschool/summer07/curriculum.html),
    [2006](https://www.cs.uoregon.edu/research/summerschool/summer06/curriculum.html),
    [2005](https://www.cs.uoregon.edu/research/summerschool/summer05/curriculum.html)

-   [Type Theory Study Group 2015](https://github.com/type-theory/type-theory-study-group-2015)

## Type theory

Danny Gratzer's [learn-tt](https://github.com/jozefg/learn-tt) is a fantastic
resource for those interested in type and category theory. He presents all the
terrific tools, textbooks, and papers that deal with both of these in a sensible and
logical way, which is a quality that my repository will never have.

I'll only list here resources which he doesn't mention and which I personally find
interesting.

Check out the [TYPES](http://lists.seas.upenn.edu/mailman/listinfo/types-list)
mailing list as well.

### Dependent types

-   A\. Bove, P. Dybjer: [_Dependent Types at Work_](http://www.cse.chalmers.se/~peterd/papers/DependentTypesAtWork.pdf)
    – introduction to programming with dependent types in Agda

## Copyright

Written in 2015 by Matěj Grabovský <matej.grabovsky at gmail>

To the extent possible under law, the author has dedicated all copyright and related
and neighboring rights to this software to the public domain worldwide. This software
is distributed without any warranty.

You should have received a copy of the CC0 Public Domain Dedication along with this
software. If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.

<!-- vim: set et ts=4 sw=4: -->
